@using Microsoft.AspNetCore.Http
@{
    ViewData["Title"] = "AppointmentList";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var successMessage = TempData["SuccessMessage"] as string;
    var errorMessage = TempData["ErrorMessage"] as string;
    var usuarioId = ViewContext.HttpContext.Session.GetInt32("UsuarioId");
    var perfilId = ViewContext.HttpContext.Session.GetInt32("PerfilId");
}

@section styles {
    <link rel="stylesheet" href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap5.min.css" />
    <link rel="stylesheet" href="https://cdn.datatables.net/responsive/2.2.9/css/responsive.bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.2.2/css/buttons.dataTables.min.css">
}

<div class="row">
    <div class="col-lg-12">

        @if (TempData["Error"] != null)
        {
            <div class="alert alert-danger">
                @TempData["Error"]
            </div>
        }

        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Appointment List</h5>
                <div class="btn-group mt-3" role="group" style="text-align:center">
                    <button type="button" class="btn btn-soft-success @(ViewBag.CurrentStatus == 0 ? "active" : "")"
                            onclick="filterAppointments(0)">
                        Pagadas
                    </button>
                    <button type="button" class="btn btn-soft-warning @(ViewBag.CurrentStatus == 1 ? "active" : "")"
                            onclick="filterAppointments(1)">
                        Activas
                    </button>
                    <button type="button" class="btn btn-soft-danger @(ViewBag.CurrentStatus == 2 ? "active" : "")"
                            onclick="filterAppointments(2)">
                        Canceladas
                    </button>
                    <button type="button" class="btn btn-soft-info @(ViewBag.CurrentStatus == 3 ? "active" : "")"
                            onclick="filterAppointments(3)">
                        Seguimiento
                    </button>
                    <button type="button" class="btn btn-soft-dark @(ViewBag.CurrentStatus == 4 ? "active" : "")"
                            onclick="filterAppointments(4)">
                        Finalizadas
                    </button>
                </div>

                <div class="card-body col-xxl-12">
                    <table id="appointmentTable" class="table nowrap dt-responsive align-middle table-hover table-bordered">
                        <thead>
                            <tr>
                                <th hidden>ID</th>
                                @if (perfilId == 1 || perfilId == 3)
                                {
                                    <th>Nombre del médico</th>
                                }
                                <th>Fecha de la cita</th>
                                <th>Nombre del paciente</th>
                                <th>Estado de la cita</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (var appointment in Model)
                            {
                                <tr>
                                    <td hidden>@appointment.AppointmentId</td>
                                    @if (perfilId == 1 || perfilId == 3)
                                    {
                                        <td>@(!string.IsNullOrEmpty(appointment.DoctorName) ? appointment.DoctorName : appointment.DoctorName2)</td>
                                    }

                                    <td>@appointment.AppointmentDate.ToString("dd/MM/yyyy") @appointment.AppointmentHour.ToString()</td>
                                    <td>@appointment.PatientName</td> <!-- Nombre completo del paciente -->
                                    <td>
                                        @{
                                            var (statusClass, statusText) = appointment.AppointmentStatus switch
                                            {
                                                0 => ("bg-success", "Pagadas"),
                                                1 => ("bg-warning", "Activas"),
                                                2 => ("bg-danger", "Canceladas"),
                                                3 => ("bg-info", "Seguimiento"),
                                                4 => ("bg-dark", "Finalizadas")
                                            };
                                        }
                                        <span class="badge @statusClass">@statusText</span>
                                    </td>
                                    <td>
                                        @if (appointment.AppointmentStatus == 4 || appointment.AppointmentStatus == 2)
                                        {
                                            <!-- Si la cita está  cancelada, deshabilitar el botón -->
                                            <span class="btn btn-sm btn-soft-secondary" style="pointer-events: none;">
                                                <i class="ri-edit-line"></i> Review
                                            </span>
                                        }
                                        else
                                        {
                                            <!-- Si la cita está activa o en seguimiento, mostrar el botón -->
                                            <a href="#" class="btn btn-sm btn-soft-info"
                                               data-bs-toggle="modal" data-bs-target="#optionModal"
                                               onclick="openOptionModal(@appointment.AppointmentId,@appointment.AppointmentStatus)">
                                                <i class="ri-edit-line"></i> Review
                                            </a>
                                        }
                                    </td>

                                </tr>
                            }
                        </tbody>

                    </table>
                </div>

            </div>
        </div>

    </div>
</div>



<!-- Modal opciones cita -->
<div class="modal flip" id="optionModal" tabindex="-1" aria-labelledby="exampleModalgridLabel" aria-modal="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <!-- Input oculto para el estado -->
            <input type="hidden" id="appointmentIdInput" name="appointmentIdInput" />
            <input type="hidden" id="appointmentStatus" name="AppointmentStatus" />
            <!-- Otros inputs ocultos... -->

            <div class="modal-header">
                <h5 class="modal-title">¿Qué desea hacer con esta cita?</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <div class="row g-3">
                    <!-- Botones con contenedores identificados -->
                    <div class="col-4" id="rescheduleCol">
                        <button type="button" class="btn btn-soft-info btn-label btn-sm w-100 waves-effect waves-light"
                                onclick="openRescheduleModal()">
                            <i class="ri-user-smile-line label-icon align-middle fs-16 me-2"></i> Reagendar Cita
                        </button>
                    </div>

                    <div class="col-4" id="cancelCol">
                        <button type="button" class="btn btn-soft-danger btn-label btn-sm w-100 waves-effect waves-light"
                                onclick="cancelAppointment()">
                            <i class="ri-error-warning-fill label-icon align-middle fs-16 me-2"></i> Cancelar Cita
                        </button>
                    </div>

                    <div class="col-4" id="payCol">
                        <button type="button" class="btn btn-soft-success btn-label btn-sm w-100 waves-effect waves-light"
                                onclick="payAppointment()">
                            <i class="ri-secure-payment-line label-icon align-middle fs-16 me-2"></i> Pagar cita
                        </button>
                    </div>

                    <!-- Botón Consulta Normal -->
                    <div class="col-4" id="startConsultCol">
                        <button type="button" class="btn btn-soft-dark btn-label btn-sm w-100 waves-effect waves-light"
                                onclick="startConsultation()">
                            <i class="las la-file-medical-alt label-icon align-middle fs-16 me-2"></i> Empezar Consulta
                        </button>
                    </div>

                    <!-- Botón Consulta Seguimiento -->
                    <div class="col-4" id="startFollowupCol">
                        <button type="button" class="btn btn-soft-dark btn-label btn-sm w-100 waves-effect waves-light"
                                onclick="startFollowupConsultation()">
                            <i class="las la-file-medical-alt label-icon align-middle fs-16 me-2"></i> Empezar Consulta Seguimiento
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Modal agendar cita disponibles -->
<div class="modal flip" id="appointmentModalgrid" tabindex="-1" aria-labelledby="appointmentModalgridLabel">
    <div class="modal-dialog">
        <div class="modal-content">

            <div class="modal-header">
                <h5 class="modal-title" id="appointmentModalgridLabel"> Que desea hacer con esta cita?</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <form class="row g-3 needs-validation" novalidate name="formData">

                    <div class="col-xxl-6" hidden>
                        <label for="patientId" hidden class="form-label">Patient Id</label>
                        <input type="hidden" class="form-control" id="patientId" required> <!-- Campo oculto para el ID del paciente -->
                        <input type="hidden" class="form-control" id="appointment" required> <!-- Campo oculto para el ID de la cita -->
                        <input type="hidden" class="form-control" id="doctorUserId"> <!-- Campo de texto para el ID del doctor -->
                    </div>


                    <!-- Input de usuarioId y fecha -->
                    <div class="col-xxl-6">
                        <label for="selectedDate" class="form-label">Seleccione una fecha</label> <!-- Etiqueta para seleccionar la fecha -->
                        <input type="date" class="form-control" id="selectedDate" required> <!-- Campo de selección de fecha -->
                    </div>

                    <div class="col-xxl-6">
                        <label for="appointmentTime" class="form-label">La hora de su cita es:</label> <!-- Etiqueta para la hora de la cita -->
                        <input type="time" class="form-control" id="appointmentTime" required> <!-- Campo de selección de la hora de la cita -->
                    </div>

                    <div class="col-xxl-6">
                        <button type="button" class="btn btn-soft-info" id="viewHoursButton">
                            <i class="ri-eye-fill"></i> Ver horas disponibles <!-- Botón para ver las horas disponibles -->
                        </button>
                    </div>


                    <!-- Modal de las horas disponibles -->
                    <div class="modal flip" id="hoursModalgrid" tabindex="-1" aria-labelledby="hoursModalgridLabel">
                        <div class="modal-dialog">
                            <div class="modal-content">

                                <div class="modal-header">
                                    <h5 class="modal-title" id="hoursModalgrid">Horas Disponibles</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <div class="d-flex flex-wrap gap-2 justify-content-center" id="availableHoursContainer">
                                        <!-- Aquí se mostrarán las horas disponibles -->
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">Close</button>
                                </div>

                            </div>
                        </div>
                    </div>

                </form>
            </div>

        </div>
    </div>
</div>


@section scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"
            integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>

    <!--datatable js-->
    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdn.datatables.net/responsive/2.2.9/js/dataTables.responsive.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.2.2/js/dataTables.buttons.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.2.2/js/buttons.print.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.2.2/js/buttons.html5.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>

    <script src="~/assets/js/pages/datatables.init.js"></script>

    <script>
        $(document).ready(function() {
            $('#appointmentTable').DataTable({
                responsive: true,
                pageLength: 10,
                order: [[1, 'desc']]
            });
        });

        function filterAppointments(status) {
                    window.location.href = '@Url.Action("AppointmentList", "Appointment")?' + new URLSearchParams({
                appointmentStatus: status,
                userProfile: '@ViewBag.UserProfile',
                userId: '@ViewBag.UserId',

            }).toString();
        }
    </script>

    <script>
            function openOptionModal(appointmentId, appointmentStatus) {
            // Asignar los valores a los campos ocultos
            document.getElementById('appointmentIdInput').value = appointmentId;
            document.getElementById('appointmentStatus').value = appointmentStatus;

            // Obtener referencias a los botones
            const consultaNormal = document.getElementById('startConsultCol');
            const consultaSeguimiento = document.getElementById('startFollowupCol');

            // Ocultar ambos botones inicialmente
            consultaNormal.style.display = 'none';
            consultaSeguimiento.style.display = 'none';

            // Mostrar el botón correspondiente según el estado
            if (parseInt(appointmentStatus) === 1) {
                consultaNormal.style.display = 'block';
            } else if (parseInt(appointmentStatus) === 3) {
                consultaSeguimiento.style.display = 'block';
            }

            // Mostrar el modal
            const optionModal = new bootstrap.Modal(document.getElementById('optionModal'));
            optionModal.show();
        }


            function openRescheduleModal() {
            // Obtener el ID de la cita desde el campo oculto
            const appointmentId = document.getElementById("appointmentIdInput").value;

            // Obtener el perfil desde el campo oculto
            const perfilId = document.getElementById("perfiltIdInput").value;

            if (!appointmentId) {
                alert("No appointment ID found.");
                return;
            }

            // Realizar una solicitud HTTP al backend
            fetch(`/Appointment/AppointmentGetById?id=${appointmentId}&userProfile=${perfilId}`)  // Pasamos el perfilId
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Failed to fetch appointment details.");
                    }
                    return response.json();
                })
                .then(data => {
                    // Verifica si los datos existen
                    if (!data) {
                        alert("Appointment not found.");
                        return;
                    }

                    // Llenar los campos del modal con los datos de la cita
                    document.getElementById("appointment").value = appointmentId || "";
                    document.getElementById("patientId").value = data.patient || "";
                    document.getElementById("selectedDate").value = data.date || "";
                    document.getElementById("appointmentTime").value = data.time || "";

                    // Si el perfil es Asistente (3), llenar el campo de DoctorUserId
                    if (data.doctorUserId) {
                        document.getElementById("doctorUserId").value = data.doctorUserId || "";
                    }

                    // Mostrar el modal de reagendar
                    const rescheduleModal = new bootstrap.Modal(document.getElementById("appointmentModalgrid"));
                    rescheduleModal.show();
                })
                .catch(error => {
                    console.error("Error:", error);
                    alert("An error occurred while fetching appointment details.");
                });
        }



               $(document).ready(function () {
            // Al hacer clic en el botón para ver las horas disponibles
            $('#viewHoursButton').click(function () {
                var userId = @usuarioId;  // Este valor debe ser dinámico, por ejemplo, extraído de la sesión o del usuario autenticado
                var selectedDate = $('#selectedDate').val();
                var doctorUserId = $('#doctorUserId').val(); // Obtener el ID del médico seleccionado

                console.log('User ID:', userId);
                console.log('Selected Date:', selectedDate);
                console.log('Doctor User ID:', doctorUserId); // Imprimir el ID del médico

                if (!selectedDate) {
                    alert('Please select a date.');
                    return;
                }

                // Realizar la solicitud AJAX al backend
                $.ajax({
                    url: '@Url.Action("GetAvailableHours", "Appointment")',
                    type: 'GET',
                    data: {
                        userId: userId,
                        date: selectedDate,
                        doctorUserId: doctorUserId // Pasar el ID del médico si es necesario
                    },
                    success: function (response) {
                        $('#availableHoursContainer').empty();  // Limpiar el contenedor de horas disponibles

                        if (response.length > 0) {
                            // Mostrar las horas en el contenedor
                            response.forEach(function (hour) {
                                $('#availableHoursContainer').append(
                                    '<button type="button" class="btn btn-outline-primary btn-sm" data-hour="' + hour + '">' + hour + '</button>'
                                );
                            });
                        } else {
                            // Si no hay horas disponibles
                            $('#availableHoursContainer').append(
                                '<p>No available hours for this date.</p>'
                            );
                        }

                        $('#hoursModalgrid').modal('show');  // Mostrar el modal con las horas disponibles
                    },
                    error: function (xhr, status, error) {
                        alert('An error occurred while fetching available hours: ' + error);
                    }
                });
            });


            // Al hacer clic en una de las horas disponibles
            $('#availableHoursContainer').on('click', 'button', function () {
                // Obtener la hora seleccionada desde el atributo 'data-hour' del botón
                var selectedHour = $(this).data('hour');

                // Establecer la hora seleccionada en el campo de entrada
                $('#appointmentTime').val(selectedHour);

                console.log('Selected Hour:', selectedHour);
                console.log('Selected Date:', $('#selectedDate').val());
                console.log('Patient ID:', $('#patientId').val());
                console.log('Medico ID:', $('#doctorUserId').val());
                console.log('Appointment ID:', $('#appointment').val());


                // Mostrar SweetAlert para confirmación
                var selectedDate = $('#selectedDate').val(); // Obtener la fecha seleccionada
                var patientId = $('#patientId').val();  // Obtener el ID del paciente
                var doctorUserId = $('#doctorUserId').val(); // Obtener el ID del médico seleccionado
                var appointmentId = $('#appointment').val();  // Obtener el ID del paciente
                Swal.fire({
                    title: 'Confirm Appointment',
                    text: 'You have selected ' + selectedHour + ' on ' + selectedDate + '. Do you want to confirm this appointment?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'Yes, confirm it!',
                    cancelButtonText: 'No, choose again',
                    reverseButtons: true
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Si el usuario confirma, enviamos la cita al backend

                       $.ajax({
            url: '@Url.Action("ModifyAppointment", "Appointment")?doctorUserId=' + parseInt(doctorUserId),  // Convertir doctorUserId a número
            type: 'POST',
            contentType: 'application/json', // Asegúrate de especificar el tipo de contenido
            data: JSON.stringify({
               // Asegúrate de que patientId es un número entero
                                                AppointmentId: appointmentId,  // ID del paciente

                AppointmentDate: selectedDate,  // Asegúrate de que sea en formato adecuado, por ejemplo: "2025-01-31"
                AppointmentHour: selectedHour,
                  AppointmentPatientid: patientId, // Asegúrate de que selectedHour esté en formato adecuado, por ejemplo: "16:00"
            }),
            success: function (response) {
                if (response.success) {
                    // Mostrar mensaje de éxito
                    Swal.fire('Appointment confirmed!', response.message, 'success').then(() => {
                        window.location.href = '@Url.Action("AppointmentList", "Appointment")'; // Redirigir a la lista de citas
                    });
                } else {
                    // Si algo salió mal
                    Swal.fire('Error', response.message || 'There was an issue scheduling your appointment.', 'error');
                }
            },
            error: function (xhr, status, error) {
                // Manejo de errores si la solicitud falla
                Swal.fire('Error', 'There was an issue scheduling your appointment. Please try again.', 'error');
            }
        });


                        // Imprimir datos de la solicitud para depuración
                        console.log('Sending data to backend:', JSON.stringify({
                                                AppointmentId: appointmentId,  // ID del paciente

                            AppointmentPatientid: patientId,
                            AppointmentDate: selectedDate,
                            AppointmentHour: selectedHour,
                            DoctorUserId: doctorUserId  // Agregar el ID del médico aquí
                        }));

                    } else if (result.dismiss === Swal.DismissReason.cancel) {
                        // Si el usuario cancela, cerramos el modal
                        $('#hoursModalgrid').modal('hide');
                    }
                });
            });
        });


                



           // Método para desactivar una cita
                   function cancelAppointment() {
                       const appointmentId = document.getElementById("appointmentIdInput").value;
                       const userId = @usuarioId; // Suponiendo que también tienes un campo de usuario

                       if (!appointmentId || !userId) {
                           alert("No appointment ID or User ID found.");
                           return;
                       }

                       // Usar SweetAlert para confirmar la cancelación
                       Swal.fire({
                           title: 'Are you sure?',
                           text: "You are about to cancel this appointment!",
                           icon: 'warning',
                           showCancelButton: true,
                           confirmButtonText: 'Yes, cancel it!',
                           cancelButtonText: 'No, keep it',
                           reverseButtons: true
                       }).then((result) => {
                           if (result.isConfirmed) {
                               const appointmentData = {
                                   AppointmentId: appointmentId,
                                   AppointmentModifyuser: userId
                               };

                               fetch('@Url.Action("DesactivateAppointment", "Appointment")', {
                                   method: 'POST',
                                   headers: {
                                       'Content-Type': 'application/json'
                                   },
                                   body: JSON.stringify(appointmentData)
                               })
                               .then(response => {
                                   if (!response.ok) {
                                       return response.json().then(data => {
                                           throw new Error(data.message || "Failed to deactivate the appointment.");
                                       });
                                   }
                                   return response.json();
                               })
                               .then(data => {
                                   // Si la cita fue desactivada con éxito
                                   Swal.fire(
                                       'Canceled!',
                                       data.message || 'Your appointment has been canceled.',
                                       'success'
                                   );

                                   // Cerrar el modal después de 3 segundos
                                   setTimeout(() => {
                                       Swal.close();  // Cierra el modal de SweetAlert
                                       window.location.href = '@Url.Action("AppointmentList", "Appointment")';
                                   }, 3000); // Cerrar después de 3 segundos
                               })
                               .catch(error => {
                                   console.error("Error:", error);
                                   Swal.fire(
                                       'Error!',
                                       error.message || 'An error occurred while canceling the appointment.',
                                       'error'
                                   );

                                   // Cerrar el modal después de 3 segundos
                                   setTimeout(() => {
                                       Swal.close();  // Cierra el modal de SweetAlert
                                   }, 3000); // Cerrar después de 3 segundos
                               });
                           } else {
                               Swal.fire(
                                   'Cancelled',
                                   'Your appointment is safe!',
                                   'info'
                               );

                               // Cerrar el modal después de 3 segundos
                               setTimeout(() => {
                                   Swal.close();  // Cierra el modal de SweetAlert
                               }, 3000); // Cerrar después de 3 segundos
                           }
                       });
                   }


                       document.getElementById('optionModal').addEventListener('hidden.bs.modal', function () {
                // Eliminar cualquier backdrop residual
                document.querySelectorAll('.modal-backdrop').forEach(function (backdrop) {
                    backdrop.remove();
                });
                // Habilitar el desplazamiento de la página
                document.body.classList.remove('modal-open');
                document.body.style.paddingRight = '';
            });


          function startConsultation() {
            // Obtener el ID de la cita desde el campo oculto
            const appointmentId = document.getElementById("appointmentIdInput").value;
            console.log("Appointment ID:", appointmentId);

            if (!appointmentId) {
                alert("No appointment ID found.");
                return;
            }

            // Obtener los datos del paciente asociados a la cita, específicamente el PatientId
            const urlGetPatient = '@Url.Action("AppointmentGetById", "Appointment")';
            const apiUrl = `${urlGetPatient}?id=${appointmentId}`;
            console.log("API URL to fetch patient data:", apiUrl);

            fetch(apiUrl)
                .then(response => {
                    console.log("Response status:", response.status);
                    if (!response.ok) {
                        throw new Error("Failed to fetch patient details.");
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("Appointment data received:", data);

                    if (!data.patient) {
                        alert("Patient not found for this appointment.");
                        return;
                    }

                    // Redirigir a la URL de NewConsultation con el PatientId
                    const urlNewConsultation = '@Url.Action("NewConsultation", "Consultation")';
                            const consultationUrl = `${urlNewConsultation}?patientId=${data.patient}`;
                    console.log("Redirecting to:", consultationUrl);

                    // Redirigir al controlador
                    window.location.href = consultationUrl;
                })
                .catch(error => {
                    console.error("Error during consultation start:", error);
                    alert("An error occurred while starting the consultation.");
                });
        }


    </script>

}